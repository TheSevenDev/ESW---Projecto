@model PaginatedList<CIMOB_IPS.Models.Application>
@using Microsoft.EntityFrameworkCore;
<link rel="stylesheet" href='@Url.Content("~/css/site.css")' />
<link rel="stylesheet" href='@Url.Content("~/css/application.css")' />
<link rel="stylesheet" href='@Url.Content("~/css/registo.css")' />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@{ 
    long lngNoInterview = -1;
    long lngScheduledInterview = -1;
    long lngDoneInterview = -1;

    using (var context = new CIMOB_IPS_DBContext(new DbContextOptions<CIMOB_IPS_DBContext>()))
    {
        lngNoInterview = context.State.Where(s => s.Description == "Sem Marcação").Select(s => s.IdState).SingleOrDefault();
        lngScheduledInterview = context.State.Where(s => s.Description == "Marcada").Select(s => s.IdState).SingleOrDefault();
        lngDoneInterview = context.State.Where(s => s.Description == "Realizada").Select(s => s.IdState).SingleOrDefault();
    }

    var isTech = false;

    if (User.Identity.IsAuthenticated)
    {
        if (User.IsInRole("tecnico") || User.IsInRole("tecnico_admin"))
        {
            isTech = true;
        }
    }
}


<p class="page-title">Candidaturas Submetidas</p>

<form id="search-application">
    <input type="search" name="search_by" placeholder="Procurar.." value="@ViewData["search-by"]" />
    <button type="submit"><i class="fa fa-search"></i></button>
</form>

<div class="main-container-submitted-applications" style="padding:1%;padding-left:2%;">
    @if (Model.Count > 0)
    {
        <table style="margin: 1% auto; width:100%;">
            <thead>
                <tr>
                    <th style="width:4em;">
                        @*@Html.DisplayNameFor(model => model.First().IdStudentNavigation.StudentNum)*@
                        Número
                    </th>
                    <th style="width:9em;">
                        Nome
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().IdStudentNavigation.IdCourseNavigation.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().ApplicationDate)
                    </th>

                    <th>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    var strName = "";
                    var arrNames = item.IdStudentNavigation.Name.Split(' ');
                    string strFirstName = arrNames[0];
                    string strLastName = arrNames[arrNames.Length - 1];
                    if (arrNames.Length > 1)
                    {
                        strName = strFirstName + " " + strLastName;
                    }
                    else
                    {
                        strName = strFirstName;
                    }

                    <tr>
                        <td>
                            @Html.DisplayFor(model => item.IdStudentNavigation.StudentNum)
                        </td>
                        <td>
                            @if (isTech)
                            {
                                <a class="profileLink" onclick="viewProfile(@item.IdStudentNavigation.IdStudent)">@strName</a>
                            }
                            else
                            {
                                @strName
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(model => model.First().IdStudentNavigation.IdCourseNavigation.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.ApplicationDate)
                        </td>
                        <td>
                            <button id="@item.IdApplication" onclick="showApplicationDetails(@item.IdApplication);" class="evaluate-application">Detalhes</button>
                            @if (item.IdInterviewNavigation.IdState == lngNoInterview)
                            {
                                <button onclick="scheduleInterview(@item.IdApplication);" class="evaluate-application">Agendar Entrevista</button>
                            }
                            else if (item.IdInterviewNavigation.IdState == lngScheduledInterview)
                            {
                                <button onclick="reScheduleInterview(@item.IdApplication);" class="evaluate-application">Remarcar Entrevista</button>
                            }
                            else
                            {
                                <button onclick="location.href='@Url.Action("Evaluate", "Application", new { appId = item.IdApplication })'" class="evaluate-application">Avaliar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @*Página @Model.PageIndex de @Model.TotalPages
            @{
                var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                var nextDisabled = !Model.HasNextPage ? "disabled" : "";
            }

            @if (Model.HasPreviousPage)
            {
                <a asp-action="Index" asp-route-pagePending="@(Model.PageIndex - 1)" class='@prevDisabled'>Anterior</a>
            }
            &nbsp;&nbsp;&nbsp;
            @if (Model.HasNextPage)
            {
                <a asp-action="Index" asp-route-pagePending="@(Model.PageIndex + 1)" class='@nextDisabled'>Seguinte</a>
            }*@

    }
    else
    {
        <span>Nenhuma candidatura encontrada</span>
    }

</div>
