using CIMOB_IPS_BackOffice.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace CIMOB_IPS_BackOffice.Windows
{
    /// <summary>
    /// Interaction logic for TechniciansWindow.xaml
    /// </summary>
    public partial class TechniciansWindow : Window
    {
        string connstr = Utility.GetConnectionString();

        public List<PendingInvite> PendingInvites { get; set; }
        public List<Technician> Technicians { get; set; }

        public TechniciansWindow()
        {
            PendingInvites = new List<PendingInvite>();
            Technicians = new List<Technician>();

            InitializeComponent();
            PopulateDataGrids();
        }

        public void PopulateDataGrids()
        {
            PopulatePendingInvites();
            PopulateTechnicians();
        }

        public void PopulatePendingInvites()
        {
            PendingInvites.Clear();

            SqlConnection scnConn = new SqlConnection(connstr);

            string strQuery = "select id_pending, email, guid, is_admin from Pending_Account where email not like '%estudantes%'";

            SqlCommand scmCommand = new SqlCommand(strQuery, scnConn);

            try
            {
                scnConn.Open();

                SqlDataReader dtrReader = scmCommand.ExecuteReader();

                while (dtrReader.Read())
                {
                    PendingInvites.Add(new PendingInvite
                    {
                        IdPendingInvite = dtrReader.GetInt64(0),
                        Email = dtrReader.GetString(1),
                        Guid = dtrReader.GetString(2),
                        IsAdmin = dtrReader.GetBoolean(3)
                    });
                }

                DtPendingInvites.ItemsSource = PendingInvites;

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                scnConn.Close();
            }

            DtPendingInvites.Items.Refresh();
        }

        public void PopulateTechnicians()
        {
            Technicians.Clear();

            SqlConnection scnConn = new SqlConnection(connstr);

            string strQuery = "select id_technician, email, name, telephone, is_admin, active from Technician t, Account a where a.id_account = t.id_account";

            SqlCommand scmCommand = new SqlCommand(strQuery, scnConn);

            try
            {
                scnConn.Open();

                SqlDataReader dtrReader = scmCommand.ExecuteReader();

                while (dtrReader.Read())
                {
                    Technicians.Add(new Technician
                    {
                        IdTechnician = dtrReader.GetInt64(0),
                        Email = dtrReader.GetString(1),
                        Name = dtrReader.GetString(2),
                        Telephone = dtrReader.GetInt64(3),
                        IsAdmin = dtrReader.GetBoolean(4),
                        Active = dtrReader.GetBoolean(5)
                    });
                }

                DtTechnicians.ItemsSource = Technicians;

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                scnConn.Close();
            }

            DtTechnicians.Items.Refresh();
        }

        private void DtPendingInvites_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DtPendingInvites.Columns[0].Header = "ID";
            DtPendingInvites.Columns[1].Header = "E-Mail";
            DtPendingInvites.Columns[2].Header = "Admin";
            DtPendingInvites.Columns[3].Header = "GUID";
        }

        private void BtnRemoveInvites_Click(object sender, RoutedEventArgs e)
        {
            IList rows = DtPendingInvites.SelectedItems;
            if(rows.Count == 0)
            {
                MessageBox.Show("Por favor seleccione pelo menos um item da lista.");
            }
            else
            {
                if (MessageBox.Show("Tem a certeza que pretende remover " + rows.Count + "convite(s)?", "Confirmação de Remoção", MessageBoxButton.YesNo) == MessageBoxResult.Yes)
                {
                    SqlConnection scnConn = new SqlConnection(connstr);

                    string strQuery = "DELETE FROM Pending_Account WHERE id_pending IN ";
                    StringBuilder strbIds = new StringBuilder();
                    strbIds.Append("(");

                    foreach(PendingInvite pi in rows)
                    {
                        strbIds.Append(pi.IdPendingInvite + ",");
                    }

                    strbIds.Remove(strbIds.Length - 1, 1);
                    strbIds.Append(")");

                    strQuery = strQuery + strbIds.ToString();

                    SqlCommand scmCommand = new SqlCommand(strQuery, scnConn);

                    try
                    {
                        scnConn.Open();
                        scmCommand.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                    finally
                    {
                        scnConn.Close();
                        PopulatePendingInvites();
                    }
                }
            }
        }

        private void DtTechnicians_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DtTechnicians.Columns[0].Header = "ID";
            DtTechnicians.Columns[1].Header = "E-Mail";
            DtTechnicians.Columns[2].Header = "Nome";
            DtTechnicians.Columns[3].Header = "N.º Telemóvel";
            DtTechnicians.Columns[4].Header = "Admin";
            DtTechnicians.Columns[5].Header = "Activo";
        }

        private void BtnActivate_Click(object sender, RoutedEventArgs e)
        {
            ToggleTechnicians(1);
        }

        private void BtnDeactivate_Click(object sender, RoutedEventArgs e)
        {
            ToggleTechnicians(0);
        }

        private void ToggleTechnicians(int activate)
        {
            IList rows = DtTechnicians.SelectedItems;
            if (rows.Count == 0)
            {
                MessageBox.Show("Por favor seleccione pelo menos um item da lista.");
            }
            else
            {
                string strMsg = "";

                if (activate == 1)
                    strMsg = "Tem a certeza que pretende activar " + rows.Count + "técnico(s) ?";
                else
                    strMsg = "Tem a certeza que pretende desactivar " + rows.Count + "técnico(s) ?";

                if (MessageBox.Show(strMsg, "Confirmação de Remoção", MessageBoxButton.YesNo) == MessageBoxResult.Yes)
                {
                    SqlConnection scnConn = new SqlConnection(connstr);

                    string strQuery = "UPDATE Technician SET active = " + activate + " WHERE id_technician IN ";
                    StringBuilder strbIds = new StringBuilder();
                    strbIds.Append("(");

                    foreach (Technician t in rows)
                    {
                        strbIds.Append(t.IdTechnician + ",");
                    }

                    strbIds.Remove(strbIds.Length - 1, 1);
                    strbIds.Append(")");

                    strQuery = strQuery + strbIds.ToString();

                    SqlCommand scmCommand = new SqlCommand(strQuery, scnConn);

                    try
                    {
                        scnConn.Open();
                        scmCommand.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                    finally
                    {
                        scnConn.Close();
                        PopulateTechnicians();
                    }
                }
            }
        }
    }
}
